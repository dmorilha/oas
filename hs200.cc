#include <assert.h>
#include <arpa/inet.h>
#include <cstring>
#include <unistd.h>

#include "hs200.h"

static void sendPayload(const char * const a, const int po,
    const void * const p, const int s) {

  assert(NULL != a);
  assert(0 < po);
  assert(p != NULL);

  sockaddr_in address;

  memset(&address, '0', sizeof(address));

  address.sin_family = AF_INET;
  address.sin_port = htons(po);
  inet_pton(AF_INET, a, &address.sin_addr);

  {
    const int fd = socket(AF_INET, SOCK_STREAM, 0);
    assert(0 < fd);
    connect(fd, reinterpret_cast< sockaddr * >(&address), sizeof(address));
    const int n = write(fd, p, s);
    assert(n == s);
    close(fd);
  }
}

namespace oas {

HS200::HS200(const char * const a, const int p) :
  port_(p), address_(a) {
  assert(0 < port_);
  assert( ! address_.empty());
}

void HS200::on(void) {
  static const char payload[] = {
    0x00, 0x00, 0x00, 0x2A, 0xD0, 0xF2, 0x81, 0xF8, 0x8B, 0xFF,
    0x9A, 0xF7, 0xD5, 0xEF, 0x94, 0xB6, 0xC5, 0xA0, 0xD4, 0x8B,
    0xF9, 0x9C, 0xF0, 0x91, 0xE8, 0xB7, 0xC4, 0xB0, 0xD1, 0xA5,
    0xC0, 0xE2, 0xD8, 0xA3, 0x81, 0xF2, 0x86, 0xE7, 0x93, 0xF6,
    0xD4, 0xEE, 0xDF, 0xA2, 0xDF, 0xA2,
  };
  sendPayload(address_.c_str(), port_, payload, sizeof(payload));
  state_ = kOn;
}

void HS200::off(void) {
  static const char payload[] = {
    0x00, 0x00, 0x00, 0x2A, 0xD0, 0xF2, 0x81, 0xF8, 0x8B, 0xFF,
    0x9A, 0xF7, 0xD5, 0xEF, 0x94, 0xB6, 0xC5, 0xA0, 0xD4, 0x8B,
    0xF9, 0x9C, 0xF0, 0x91, 0xE8, 0xB7, 0xC4, 0xB0, 0xD1, 0xA5,
    0xC0, 0xE2, 0xD8, 0xA3, 0x81, 0xF2, 0x86, 0xE7, 0x93, 0xF6,
    0xD4, 0xEE, 0xDE, 0xA3, 0xDE, 0xA3,
  };
  sendPayload(address_.c_str(), port_, payload, sizeof(payload));
  state_ = kOff;
}

} //end of oas namespace
